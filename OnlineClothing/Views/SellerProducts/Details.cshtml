@model OnlineClothing.Models.Product

@{
    Layout = "~/Views/Shared/_SellerLayout.cshtml";
}

<!-- Cropper.js CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

<!-- Cropper.js JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

<!-- SweetAlert CSS -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

<!-- SweetAlert JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    #cropperContainer {
        width: 600px;
        height: 600px;
        margin: 0 auto;
        position: relative;
        background-color: #f0f0f0;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
        border: 1px solid #ccc;
    }

    .cropper-container {
        width: 100%;
        height: 100%;
        position: absolute;
    }

    #imagePreview {
        min-width: 380px;
        min-height: 570px;
        object-fit: contain;
        display: block;
    }
</style>

<!-- Crop Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
    <input id="productId" type="hidden" name="productId" value="@Model.Id" />
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Upload and Crop Thumbnail</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <input type="file" id="imageInput" class="form-control" accept="image/*" />
                </div>
                <div id="cropperContainer" style="display: none;">
                    <div class="cropper-container">
                        <img id="imagePreview" />
                    </div>
                </div>
                <div>
                    <button id="cropButton" class="btn btn-primary mt-3">Crop & Save</button>
                </div>
                <div id="croppedResult" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

<div class="container-xxl" style="margin-top: 30px;">
    <div class="container mb-3">
        <p class="d-inline-flex gap-1">
            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#thumbnailCollapse" aria-expanded="false" aria-controls="thumbnailCollapse">
                View thumbnail
            </button>
        </p>
        @* <div class="collapse" id="thumbnailCollapse">
            <div class="card card-body">
                <img class="mb-3" src="@Model.ThumbnailUrl" alt="@Model.Name" style="width: 100px; height: auto;" />
                <div>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#cropModal">Update thumbnail</button>
                </div>
            </div>
        </div> *@
        <div class="card collapse" id="thumbnailCollapse" style="width: 18rem; height: auto;">
            <img src="@Model.ThumbnailUrl" alt="@Model.Name" class="card-img-top">
            <div class="card-body">
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#cropModal">Update thumbnail</button>
            </div>
        </div>
    </div>
    <div class="container" id="formContainer">
        <h2 class="my-4">Product Details</h2>
        <form id="updateProductForm" asp-controller="sellerproducts" asp-action="update" method="post" enctype="multipart/form-data">
            <input type="hidden" asp-for="Id" class="form-control" />
            <input type="hidden" asp-for="ThumbnailUrl" value="@Model.ThumbnailUrl"/>
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group mb-3">
                        <label asp-for="Name" class="control-label"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group mb-3">
                        <label asp-for="CategoryId" class="control-label"></label>
                        <select asp-for="CategoryId" class="form-control form-select"
                                asp-items="ViewBag.Categories"></select>
                    </div>
                </div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Description" class="control-label"></label>
                <textarea rows="4" asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group mb-3">
                        <label asp-for="Price" class="control-label"></label>
                        <input asp-for="Price" class="form-control" />
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group mb-3">
                        <label asp-for="Quantity" class="control-label"></label>
                        <input asp-for="Quantity" class="form-control" />
                        <span asp-validation-for="Quantity" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const imageInput = document.getElementById("imageInput");
        const cropperContainer = document.getElementById("cropperContainer");
        const imagePreview = document.getElementById("imagePreview");
        const cropButton = document.getElementById("cropButton");

        let cropper; // Declare the cropper instance

        // Handle image upload
        imageInput.addEventListener("change", function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreview.src = e.target.result; // Load the image into the preview

                    // Ensure the cropper container is visible
                    cropperContainer.style.display = "flex";

                    // Initialize or replace the cropper instance
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(imagePreview, {
                        aspectRatio: 2 / 3,       // Fixed 2:3 ratio
                        viewMode: 1,              // Ensure the crop box fits within the container
                        dragMode: "move",         // Allow moving the image instead of the crop box
                        cropBoxResizable: false,  // Disable resizing of the crop box
                        cropBoxMovable: false,    // Disable movement of the crop box
                        center: true,             // Keep the crop box centered
                        background: true,        // Remove the checkerboard background
                        zoomable: true,           // Allow zooming for better precision
                        scalable: false,          // Prevent scaling of the image
                        ready() {
                            // Get the image data to dynamically set dimensions
                            const cropBoxData = this.cropper.cropBoxData;

                            // Ensure the image meets the minimum width and height
                            if (cropBoxData.width < 380 || cropBoxData.height < 570) {
                                const scaleX = 380 / cropBoxData.width;
                                const scaleY = 570 / cropBoxData.height;
                                const scale = Math.max(scaleX, scaleY); // Use the larger scale to meet minimum

                                // Resize the image to meet minimum dimensions
                                this.cropper.zoomTo(scale);
                            }

                            // Set the crop box size explicitly
                            this.cropper.setCropBoxData({
                                width: 380,   // Fixed width of the crop box
                                height: 570,  // Fixed height of the crop box (maintain 2:3 ratio)
                                left: (cropperContainer.offsetWidth - 380) / 2,  // Center horizontally
                                top: (cropperContainer.offsetHeight - 570) / 2, // Center vertically
                            });
                        }
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropButton.addEventListener("click", function () {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas({
                    width: 380,  // Thumbnail width
                    height: 570, // Thumbnail height
                });

                // Convert cropped canvas to a blob
                canvas.toBlob(function (blob) {
                    const formData = new FormData();
                    formData.append("imageFile", blob, "thumbnail.jpg");
                    formData.append("id", document.getElementById('productId').value); // Replace with actual product ID

                    // Send the thumbnail to the backend
                    fetch("/SellerProducts/SetThumbnail", {
                        method: "POST",
                        body: formData
                    })
                    .then(response => {
                        if (response.ok) {
                            Swal.fire({
                                icon: "success",
                                title: "Uploaded Successfully!",
                                text: "The thumbnail has been uploaded and set as the product's thumbnail.",
                                timer: 3000,
                                showConfirmButton: false
                            }).then(() => {
                                // Redirect to the index page after success
                                window.location.href = "/sellerproducts";
                            });
                        } else {
                            throw new Error("Failed to upload thumbnail.");
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: "error",
                            title: "Upload Failed!",
                            text: "There was an error uploading the thumbnail. Please try again.",
                        });
                        console.error("Error uploading thumbnail:", error);
                    });
                }, "image/jpeg");
            }
        });
    });

</script>