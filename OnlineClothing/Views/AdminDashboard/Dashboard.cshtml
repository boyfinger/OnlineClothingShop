@using OnlineClothing.Models.ViewModelsOfAdminDashboard
@{
    ViewBag.Title = "Admin Dashboard";
    Layout = "~/Views/AdminDashboard/AdminShared/_AdminLayout.cshtml";
}

<h2>Dashboard</h2>

<div class="row">
    <div class="col-md-3">
        <div class="card bg-primary text-white p-3">
            <h5>Số lượng sản phẩm cần duyệt</h5>
            <p class="display-6">@ViewBag.TotalProductUnapprove</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-success text-white p-3">
            <h5>Người dùng</h5>
            <p class="display-6">@ViewBag.TotalUsers</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-white p-3">
            <h5>Cửa hàng hoạt động</h5>
            <p class="display-6">@ViewBag.TotalShops</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white p-3">
            <h5>Đơn khiếu nại sản phẩm</h5>
            <p class="display-6">@ViewBag.TotalReports</p>
        </div>
    </div>
</div>
@* <div class="row mt-4"> *@
@*     <div class="col-md-12"> *@
@*         <div class="card"> *@
@*             <div class="card-header bg-info text-white"> *@
@*                 <div class="row"> *@
@*                     <div class="col-md-6"> *@
@*                         <h5 class="mb-0">Quản lý doanh thu cửa hàng</h5> *@
@*                     </div> *@
@*                     <div class="col-md-3"> *@
@*                         <select id="timeRangeSelect" class="form-select" disabled> *@
@*                             <option value="year" selected>Năm hiện tại</option> *@
@*                         </select> *@
@*                     </div> *@
@*                     <div class="col-md-3"> *@
@*                         <select id="sellerSelect" class="form-select"> *@
@*                             <option value="">-- Tất cả cửa hàng --</option> *@
@*                             @foreach (var seller in ViewBag.Sellers) *@
@*                             { *@
@*                                 <option value="@seller.Id">@seller.Name</option> *@
@*                             } *@
@*                         </select> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*             <div class="card-body"> *@
@*                 <div class="row"> *@
@*                     <div class="col-md-8"> *@
@*                         <canvas id="revenueChart" height="250"></canvas> *@
@*                     </div> *@
@*                     <div class="col-md-4"> *@
@*                         <h5>Top 5 sản phẩm bán chạy</h5> *@
@*                         <div id="topProductsContainer" class="mt-3"> *@
@*                             <p class="text-muted">Vui lòng chọn cửa hàng để xem dữ liệu</p> *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Top 10 cửa hàng doanh thu cao nhất</h5>
            </div>
            <div class="card-body">
                <canvas id="topSellersChart" height="250"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Xu hướng doanh thu 3 tháng</h5>
            </div>
            <div class="card-body">
                <canvas id="revenueTrendChart" height="250"></canvas>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Biểu đồ top 10 cửa hàng
        const topSellersCtx = document.getElementById('topSellersChart').getContext('2d');
        const topSellersChart = new Chart(topSellersCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize((ViewBag.SellerRevenueComparison as IEnumerable<SellerRevenueVM>)?.Select(x => x.SellerName))),
                datasets: [{
                    label: 'Doanh thu',
                    data: @Html.Raw(Json.Serialize((ViewBag.SellerRevenueComparison as IEnumerable<SellerRevenueVM>)?.Select(x => x.Revenue))),
                    backgroundColor: 'rgba(54, 162, 235, 0.7)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Doanh thu: ' + context.raw.toLocaleString('vi-VN') + 'đ';
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString('vi-VN') + 'đ';
                            }
                        }
                    }
                }
            }
        });

        // Biểu đồ xu hướng doanh thu 3 tháng
        const revenueTrendCtx = document.getElementById('revenueTrendChart').getContext('2d');
        const revenueTrendChart = new Chart(revenueTrendCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize((ViewBag.RevenueTrend as IEnumerable<RevenueTrendVM>)?.Select(x => x.Period))),
                datasets: [{
                    label: 'Doanh thu',
                    data: @Html.Raw(Json.Serialize((ViewBag.RevenueTrend as IEnumerable<RevenueTrendVM>)?.Select(x => x.Revenue))),
                    fill: false,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return 'Doanh thu: ' + context.raw.toLocaleString('vi-VN') + 'đ';
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString('vi-VN') + 'đ';
                            }
                        }
                    }
                }
            }
        });

        // Biểu đồ doanh thu chi tiết
        const revenueChart = new Chart(
            document.getElementById('revenueChart').getContext('2d'),
            {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Doanh thu',
                        data: [],
                        backgroundColor: 'rgba(153, 102, 255, 0.7)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Doanh thu: ' + context.raw.toLocaleString('vi-VN') + 'đ';
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN') + 'đ';
                                }
                            }
                        }
                    }
                }
            }
        );

        // Tải dữ liệu doanh thu
        function loadRevenueData(sellerId) {
            fetch('/Admin/AdminDashboard/GetSellerRevenueData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    sellerId: sellerId
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    console.error('Server error:', data.error);
                    return;
                }
                updateRevenueChart(data);
            })
            .catch(error => {
                console.error('Error fetching revenue data:', error);
                $('#topProductsContainer').html('<p class="text-danger">Lỗi khi tải dữ liệu doanh thu</p>');
            });
        }

        // Cập nhật biểu đồ doanh thu
        function updateRevenueChart(data) {
            // Kiểm tra nếu không có dữ liệu
            if (!data || data.length === 0) {
                revenueChart.data.labels = [];
                revenueChart.data.datasets[0].data = [];
                revenueChart.update();
                $('#topProductsContainer').html('<p class="text-muted">Không có dữ liệu doanh thu trong năm nay</p>');
                return;
            }

            // Tạo mảng 12 tháng
            const allMonths = Array.from({ length: 12 }, (_, i) => {
                return {
                    month: i + 1,
                    monthName: new Date(0, i).toLocaleString('default', { month: 'short' }),
                    revenue: 0
                };
            });

            // Gộp với dữ liệu từ server
            const mergedData = allMonths.map(month => {
                const found = data.find(d => d.month === month.month);
                return found || month;
            });

            // Cập nhật dữ liệu biểu đồ
            revenueChart.data.labels = mergedData.map(x => x.monthName);
            revenueChart.data.datasets[0].data = mergedData.map(x => x.revenue);
            revenueChart.update();
        }

        // Tải top sản phẩm
        function loadTopProducts(sellerId) {
            fetch(`/Admin/AdminDashboard/GetTopProducts?sellerId=${sellerId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        console.error('Server error:', data.error);
                        return;
                    }
                    updateTopProducts(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                    $('#topProductsContainer').html('<p class="text-danger">Lỗi khi tải dữ liệu sản phẩm</p>');
                });
        }

        // Cập nhật top sản phẩm
        function updateTopProducts(products) {
            const container = $('#topProductsContainer');
            if (!products || products.length === 0) {
                container.html('<p class="text-muted">Không có dữ liệu sản phẩm</p>');
                return;
            }

            let html = '<div class="list-group">';
            products.forEach(product => {
                html += `
                <div class="list-group-item">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">${product.productName}</h6>
                        <small>${product.totalRevenue.toLocaleString('vi-VN')}đ</small>
                    </div>
                    <small class="text-muted">Đã bán: ${product.totalSold}</small>
                </div>`;
            });
            html += '</div>';

            container.html(html);
        }

        // Xóa dữ liệu khi không chọn seller
        function clearCharts() {
            revenueChart.data.labels = [];
            revenueChart.data.datasets[0].data = [];
            revenueChart.update();

            $('#topProductsContainer').html('<p class="text-muted">Vui lòng chọn cửa hàng để xem dữ liệu</p>');
        }

        // Xử lý thay đổi lựa chọn
        $('#sellerSelect').change(function() {
            const sellerId = $(this).val();
            if (sellerId) {
                loadRevenueData(sellerId);
                loadTopProducts(sellerId);
            } else {
                clearCharts();
            }
        });

        // Tải dữ liệu mặc định cho seller đầu tiên
        $(document).ready(function() {
            const firstSeller = $('#sellerSelect option:eq(1)').val();
            if (firstSeller) {
                $('#sellerSelect').val(firstSeller).trigger('change');
            }

            // Disable time range select vì chỉ hiển thị theo năm
            $('#timeRangeSelect').prop('disabled', true);
        });
    </script>
}